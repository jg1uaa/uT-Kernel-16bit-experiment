H8/3664向けμT-Kernel（実験版）実装仕様書

Version 1.01.01
2012年8月


1 CPU

1.1 ハードウェア仕様

CPU:	Renesas H8/3664 @16MHz
ROM	32kB（CPU内蔵）
RAM:	2kB（CPU内蔵）

AKI-H8/3664F QFP タイニーマイコンキット（秋月電子通商 K-159）を使用する。
(http://akizukidenshi.com/catalog/g/gK-00159/)

32kHzのサブクリスタルを装備した他のH8/3664Fボードでも動作すると思われるが、動
作は確認していない。

1.2 動作モードと保護レベル

MMUやMPUが存在しないため、保護レベルの切り替えという概念は無い。
保護レベルの指定は、全てレベル0として扱う。

この移植はμT-Kernelが16bit CPUに対応することを確認するために行っているため、
H8/3664をH8/300HではなくH8/300アーキテクチャのCPUとして扱う。よって、H8/300Hで
追加されたE0〜E7レジスタおよびTRAPA命令は使用しない。

2 メモリマップ

2.1 全体

	0x0000		+-----------------------+
			|内蔵ROM (32kB)		|	0x0000-0x7fff
	0x8000		+-----------------------+
			:(未使用)		:
	0xf780		+-----------------------+
			|内蔵RAM (2kB)		|	0xf780-0xff7f
	0xff80		+-----------------------+
			|内部I/Oレジスタ	|	0xff80-0xffff
	0xffff		+-----------------------+

2.2 内蔵ROM領域

32kBの内蔵ROM領域は、以下のように使用する。

	0x0000		+-----------------------+
			|割込例外ベクタテーブル	|	0x0000-0x0033
	0x0034		+-----------------------+
			|μT-Kernelコード	|
			+- - - - - - - - - - - -+
			|(未使用)		|
	0x8000		+-----------------------+

内蔵ROMには、割込例外ベクタテーブルとμT-Kernelコードを配置する。

2.3 内蔵RAM領域

2kBの内蔵RAM領域は、以下のように使用する。

	0xf780		+-----------------------+
			|.data			|
			+- - - - - - - - - - - -+
			|.bss (NoInit)		|
			+- - - - - - - - - - - -+
			|.bss			|
			+- - - - - - - - - - - -+	←SYSTEMAREA_TOP
			|μT-Kernel管理領域	|
	0xfec0		+-----------------------+	←SYSTEMAREA_END
			|割込スタック (192byte)	|
	0xff80		+-----------------------+	←sp初期値

			NoInit: ゼロ初期化されない.bss

内蔵RAMの下位アドレスから、.dataおよび.bssを割り当てる。

μT-Kernel管理領域は、μT-Kernelのメモリ管理機能が使用する。

μT-Kernel管理領域は、設定ファイル(utk_config_depend.h)のSYSTEMAREA_TOP, SYSTE
MAREA_ENDの指定された間の領域とする。通常は、空いているメモリ領域は全てμT-Ker
nelのメモリ管理機能に割り当てられる。

2.4 スタック

以下の二種類のスタックが存在する。

(1)システムスタック
(2)割り込みスタック

詳細は、μT-Kernel実装仕様書 H8S/2212版を参照。

3 割り込み及び例外

3.1 割り込み定義番号

tk_def_int()で定義する割り込み定義番号(dintno)は、以下に示すベクタ番号の値を使
用する。

	ベクタアドレス	ベクタ番号	割り込み要因
	0x0000		0		reset
	0x0002		1		reserved
	0x0004		2		reserved
	0x0006		3		reserved
	0x0008		4		reserved
	0x000a		5		reserved
	0x000c		6		reserved
	0x000e		7		NMI
	0x0010		8		reserved [trap (#0)]
	0x0012		9		reserved [trap (#1)]
	0x0014		10		reserved [trap (#2)]
	0x0016		11		reserved [trap (#3)]
	0x0018		12		address break
	0x001a		13		direct transition
	0x001c		14		IRQ0
	0x001e		15		IRQ1
	0x0020		16		IRQ2
	0x0022		17		IRQ3
	0x0024		18		WKP
	0x0026		19		Timer A
	0x0028		20		reserved
	0x002a		21		Timer W
	0x002c		22		Timer V
	0x002e		23		SCI3
	0x0030		24		I2C
	0x0032		25		A/D converter

3.2 TRAPA命令の割り当て

TRAPA命令は使用しない。この命令に依存した機能には対応しない。

3.3 割り込みハンドラ

μT-Kernel実装仕様書 H8S/2212版を参照。

4 初期化および起動処理

4.1 起動手順

システムがリセットされると、カーネルが起動する。
カーネルが起動してから、main()関数が呼ばれるまでの処理は以下の通り。

icrt0.S
	(1)スタックポインタの設定 [start:]
	(2)CCRの初期化 [start:]
	(3)データセクションの初期値設定(ROM→RAM) [data_loop:]
	(4)BSSセクションのゼロクリア [bss_loop:]
	(5)カーネル管理領域の範囲計算 [bss_done:]
	(6)main関数(sysinit_main.c)の呼び出し [kernel_start:]

4.2 ユーザ初期化プログラム

μT-Kernel実装仕様書 H8S/2212版を参照。

5 カーネル実装仕様

5.1 システム状態判定

(1)タスク独立部（割り込みハンドラ・タイムイベントハンドラ）

カーネル内にフラグを設けて判定。

	knl_taskindp = 0	タスク部
	knl_taskindp > 0	タスク独立部

(2)凖タスク部（拡張SVCハンドラ）

カーネル内にフラグを設けて判定。

	TCBのsysmode = 0	タスク部
	TCBのsysmode > 0	タスク独立部

5.2 カーネルが使用する例外・割り込み

	dintno 19	Timer A

5.3 システムコール／拡張SVCのインタフェース

呼び出し方法等に関する基本的な説明は、μT-Kernel実装仕様書 H8S/2212版を参照。

ただしEXRレジスタは存在しないため、このレジスタに対する操作は行わない。

TRAPA命令を使用したインターフェースは持たず、直接呼び出しのみ対応する。
拡張SVCおよびデバッガサポート機能には対応しない。

5.4 システムコール呼び出し時のスタック

TRAPA命令を使用したシステムコールの呼び出しには対応しない。

5.5 拡張SVC呼び出し時のスタック

拡張SVCには対応しない。

5.6 割り込み発生時のスタック

μT-Kernel実装仕様書 H8S/2212版を参照。

5.7 タスクの実装依存定義

μT-Kernel実装仕様書 H8S/2212版を参照。

5.8 タスクレジスタの設定・参照

μT-Kernel実装仕様書 H8S/2212版を参照。

6 システムコンフィギュレーションデータ

6.1 utk_config_depend.hの設定値

μT-Kernel実装仕様書 H8S/2212版を参照。
ただし、以下の項目に関してはリファレンスコードと異なっている。

	SYSTEMAREA_TOP, SYSTEMAREA_END, RI_USERAREA_TOP, RI_INTSTACK
		各CPUのメモリマップに応じた値とする。

	CFN_TIMER_PERIOD
		250msとする。

	CFN_MAX_TSKID, CFN_MAX_SEMID, CFN_MAX_FLGID, CFN_MAX_MBXID,
	CFN_MAX_MTXID, CFN_MAX_MBFID, CFN_MAX_PORID, CFN_MAX_MPLID,
	CFN_MAX_MPFID, CFN_MAX_CYCID, CFN_MAX_ALMID, CFN_MAX_SSYID,
	CFN_MAX_REGDEV, CFN_MAX_OPNDEV, CFN_MAX_REQDEV
		必要最小限のオブジェクトしか有効にしていない。

6.2 makerules

μT-Kernel実装仕様書 H8S/2212版を参照。

なお、trapは使用できない。

7. Makeのためのヒント

ビルドの前に、以下の環境変数の設定を忘れないこと。

	$ export BD=/home/user/utkernel_source
	$ export GNU_BD=/usr/local
	$ export TOOL_ORIGIN=GNUh8300
	$ export GNUh8300=/usr/local/h8300-elf

ビルド用のディレクトリは、$(BD)/kernel/sysmain/build/app_h83664。
makeでビルド、make cleanでオブジェクトのクリーンアップ。
BSD環境ではGNU makeを使うこと。

ターゲットに転送するのは、kernel-rom.mot。
